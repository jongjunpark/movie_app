{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["MoviePoster","poster","src","className","MovieGenres","genre","Movie","this","props","title","genres","map","index","synopsis","React","Component","App","state","_renderMovies","movies","movie","console","log","length","substring","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","res","data","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAwBA,SAASA,EAAT,GAAgC,IAAVC,EAAS,EAATA,OAClB,OACI,qBAAKC,IAAKD,EAAQE,UAAU,iBAIpC,SAASC,EAAT,GAA+B,IAATC,EAAQ,EAARA,MAClB,OACI,sBAAMF,UAAU,eAAhB,SAAgCE,IAmBzBC,M,uKA7Cb,OACM,sBAAKH,UAAU,QAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,cAACH,EAAD,CAAaC,OAAQM,KAAKC,MAAMP,WAEpC,sBAAKE,UAAU,mBAAf,UACI,mBAAGA,UAAU,cAAb,SAA4BI,KAAKC,MAAMC,QACvC,qBAAKN,UAAU,mBAAf,SACKI,KAAKC,MAAME,OAAOC,KAAI,SAACN,EAAOO,GAAR,OAAkB,cAACR,EAAD,CAAaC,MAAOA,GAAYO,QAE7E,mBAAGT,UAAU,iBAAb,SAA+BI,KAAKC,MAAMK,qB,GAZtCC,IAAMC,WCkDXC,E,4MA/CbC,MAAQ,G,EAMRC,cAAgB,WAcd,OAbe,EAAKD,MAAME,OAAOR,KAAI,SAACS,EAAOR,GAK3C,OAJAS,QAAQC,IAAIF,EAAMP,SAASU,QACvBH,EAAMP,SAASU,OAAS,MAC1BH,EAAMP,SAAWO,EAAMP,SAASW,UAAU,EAAE,KAAO,OAE9C,cAAC,EAAD,CACLf,MAAOW,EAAMK,cACbxB,OAAQmB,EAAMM,mBAEdhB,OAAQU,EAAMV,OACdG,SAAUO,EAAMP,UAFXO,EAAMO,Q,EAQjBC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLX,EADK,OAEX,EAAKY,SAAS,CACZZ,WAHS,2C,EAObW,SAAW,WACT,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAIA,EAAIC,KAAKlB,UACrBmB,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,kEA/B1BhC,KAAKqB,e,+BAkCG,IACAT,EAAWZ,KAAKU,MAAhBE,OACR,OACE,qBAAKhB,UAAWgB,EAAS,MAAQ,eAAjC,SACGZ,KAAKU,MAAME,OAASZ,KAAKW,gBAAkB,mB,GA3ClCH,aCOHyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a73b7bff.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './Movie.css';\r\n\r\nclass Movie extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n        <div className=\"movie\">\r\n            <div className=\"movie_poster_box\">\r\n                <MoviePoster poster={this.props.poster}/>\r\n            </div>\r\n            <div className=\"movie_detail_box\">\r\n                <p className=\"movie_title\">{this.props.title}</p>\r\n                <div className=\"movie_genres_box\">\r\n                    {this.props.genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"movie_synopsis\">{this.props.synopsis}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\t}\r\n}\r\n\r\n\r\nfunction MoviePoster({poster}) {\r\n    return (\r\n        <img src={poster} className=\"movie_poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenres({genre}) {\r\n    return (\r\n        <span className=\"movie_genres\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenres.propTypes = {\r\n    genre: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Movie\r\n\r\n","import { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\nclass App extends Component {\n\n  state = {}\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      console.log(movie.synopsis.length)\n      if (movie.synopsis.length > 400) {\n        movie.synopsis = movie.synopsis.substring(0,400) + '...'\n      }\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=download_count\")\n    .then(response => response.json())\n    .then(res => res.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}